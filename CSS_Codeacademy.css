We say these style sheets are cascading
because the sheets can apply formatting
when more than one style applies.
For instance, if you say all paragraphs should have blue font,
but you specifically single out one paragraph to have red font,
CSS can do that!


div div p {
    /*CSS nested in a p*/
}

div > p { Direct nesting}

There are two selectors that are even more specific
than nested selectors like the ones above: classes and IDs.

Some examples
HTML
<li><p class="list_item">Text</p></li>
<p id="intro">Cascading with CSS</p>

CSS
.list_item {
	font-family: Vivaldi, cursive;
}
#intro {
	font-weight: bold;
	color: #000000;
}

pseudo-class selectors..
selector:pseudo-class_selector {
    property: value;
} Its just the colon.

a:hover {
	color: #cc0000;
	font-weight: bold;
	text-decoration: none;
}

a:link: An unvisited link.
a:visited: A visited link.
a:hover: A link you're hovering your mouse over.
p:first-child: applied to fisrt child
p:nth-child(n)

We can change all this with the first positioning
property we'll learn: the display property.
We'll learn about four possible values.

display: inline

block: This makes the element a block box.
It won't let anything sit next to it on the page!
It takes up the full width.

inline-block: This makes the element a block box,
but will allow other elements to sit next to it on the same line.

inline: This makes the element sit on the same line as another element,
but without formatting it like a block. It only takes up as
much width as it needs (not the whole line).

The inline display value is better suited for HTML elements
that are blocks by default, such as headers and paragraphs.

none: This makes the element and its content
 disappear from the page entirely!

Box model
*Not really used anymore
Margin: space around the element
values: auto
You can also set an element's margins all at once: you just start
from the top margin and go around clockwise
(going from top to right to bottom to left). For instance
margin: 1px 2px 3px 4px;

margin-top: /*some value*/
margin-right: /*some value*/
margin-bottom: /*some value*/
margin-left: /*some-value*/ can take negatives to mve left

padding works the same way as margins.

Border: edge of the element
padding: spacing between content and border
content:actual stuff

use floats. When you float an element on the page,
you're telling the webpage: "I'm about to tell you where
to put this element, but you have to put it
 into the flow of other elements."

Makes sure does not get buried on page
element {
    clear: /*right, left, or both*/
}

If you don't specify an element's positioning type,
it defaults to static.
This just means "where the element would normally go."

When an element is set to position: absolute, it's then positioned
in relation to the first parent element it has
that doesn't have position: static. If there's no such element,
the element with position: absolute gets positioned relative to <html>.

You can also do relative. Moves relative to static positioning.

fixed positioning anchors an element to the browser
windowâ€”you can think of it as gluing the element
to the screen. If you scroll up and down,
the fixed element stays put even as other elements scroll past.

* {
    border: 2px solid black;
		/*this selects every element*/
		can be used for a "box model"
}
td {
    height: 50px;
    border: 1px dashed blue;
}

table {
    border: 1px solid black;
}

p {
font-family:Garamond;
font-size:16px;
}

h3 {
font-family:cursive;
color:#36648b;
text-align:center;
}

span {
color:#cc0000;
font-size:24px;
}


img {
	width:100px;
	height:100px;
}

table, td {
	border: 1px #70b8ff dashed;
}


body {
	background-color: #b7d1c4
}

h2 {
	font-family: Verdana;
	font-weight: bold;
	text-align: center;
	padding-top: 25px;
	padding-bottom: 25px;
	color: #acd1b2;
}

img {
	height: 170px;
	width: 170px;
	box-shadow: rgba(0,0,0,0.2) 10px 10px;

}

#navbar {
	position: fixed;
	top:10px;
	left:50%;
	margin-left:-254px;
}

#header {
	position: relative;
	top: -10px;
	background-color: #3c4543;
	border-top-left-radius: 15px;
	border-top-right-radius: 15px;
}

ul{
	list-style-type: none;
	position: fixed;
	margin: -10px;
}

li {
	display: inline;
	border: 2px solid #000000;
	font-family: Futura, Tahoma, sans-serif;
	color: #ffffff;
	padding: 5px;
	border-radius: 5px 5px;
	background-color: #cc0323
}

#left{
	width: 45%;
	float: left;
}

p {
	font-family: Tahoma;
	font-size: 1em;
}

#right{
	width: 45%;
	float: right;
}

table {
	border: #000000 1px solid;
	background-color: #acd1b2;
	float: right;
	margin-right: 10px;
	border-bottom-right-radius: 15px;
	border-bottom-left-radius: 15px;
}

td {
	height: 75px;
	width: 75px;
}

td img {
	height: 75px;
	width: 75px;
	box-shadow: none;
}

th {
	font-family: Verdana;
	font-size: 1em;
	font-weight: normal;
	color: #3c4543
}

#bottom_left{
	border-bottom-left-radius: 15px;
}

#bottom_right{
	border-bottom-right-radius: 15px;
}

#footer{
	clear: both;
	position: relative;
	bottom: -20px;
	border-bottom-left-radius: 15px;
	border-bottom-right-radius: 15px;
	height: 75px;
	background-color: #3c4543;
}

#button{
	border: 2px solid #000000;
	float:left;
	position: relative;
	left: 229px;
	bottom: -20px;
	border-radius: 5px;
	background-color: #cc0323;
	height: 30px;
	width: 150px;

}

#button p{
	position: relative;
	bottom: 10px;
	font-size: 0.8em;
	color: #acd1b2;
	text-align: center;
}

.bold{
	font-family: tahoma;
	font-weight: bold;
	font-size: 1.2em;
	font-variant: small-caps;
	color: #ffffff;
}


unit em is a relative measure

/* button design */
img {
	display: block;
	height: 100px;
	width: 300px;
	margin: auto;
}

p {
	text-align: center;
	font-family: Garamond, serif;
	font-size: 18px;
}

div {
	border-radius: 5px;
	border: 2px solid #6495ED;
	background-color: #BCD2EE;
	height: 50px;
	width: 120px;
	margin: auto;
	text-align: center
	border-style: solid;
	border-width:2px;
	margin: auto;
  text-align:center;
};
}

a {
	text-decoration: none;
	color: #3D59AB;
	font-family: Verdana, sans-serif;
}

span {
	font-weight: bold;
	font-size: 18px;
	color: #ffffff;
}
